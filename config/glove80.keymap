/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>

/* Include all behaviour includes needed by system behaviors/macros */
/* Include behaviour includes needed by key binds - automatically generated */

#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */
#define LAYER_Base 0
#define LAYER_Lower 1
#define LAYER_Magic 2

/* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

/ {
    /* Glove80 system behavior & macros */

    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };

    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };
        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };
        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };
        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };
        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    /* Custom Defined Behaviors */

    //////////////////////////////////////////////////////////////////////
    // NOTE: Use the `#define` settings below to customize this keymap! //
    // You can override them here instead of modifying them down there. //
    // /* EXAMPLE: */  #define EMOJI_HAIR_STYLE_PRESET 3 // curly_hair  //
    //////////////////////////////////////////////////////////////////////
    //
    // Sunaku's Keymap v29 featuring the Engrammer layout with Miryoku
    // - https://github.com/sunaku/glove80-keymaps
    //
    //////////////////////////////////////////////////////////////////////

    behaviors {

        //////////////////////////////////////////////////////////////////////////
        //
        // Miryoku layers and home row mods (ported from my QMK endgame)
        // - https://sunaku.github.io/home-row-mods.html#porting-to-zmk
        // - https://github.com/urob/zmk-config#timeless-homerow-mods
        //
        //////////////////////////////////////////////////////////////////////////

        //
        // HOMEY_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
        // for the pinky, ring, and middle fingers (which are assigned to Super,
        // Alt, and Ctrl respectively in the Miryoku system) on home row keys.
        //
        #ifndef HOMEY_HOLDING_TYPE
        #define HOMEY_HOLDING_TYPE "tap-preferred"
        #endif

        //
        // HOMEY_HOLDING_TIME defines how long you need to hold (milliseconds)
        // home row mod keys in order to send their modifiers to the computer
        // (i.e. "register" them) for mod-click mouse usage (e.g. Ctrl-Click).
        //
        #ifndef HOMEY_HOLDING_TIME
        #define HOMEY_HOLDING_TIME 270 // TAPPING_TERM + ALLOW_CROSSOVER_AFTER
        #endif

        //
        // HOMEY_STREAK_DECAY defines how long you need to wait (milliseconds)
        // after typing before you can use home row mods again.  It prevents
        // unintended activation of home row mods when you're actively typing.
        //
        #ifndef HOMEY_STREAK_DECAY
        #define HOMEY_STREAK_DECAY 170 // global-quick-tap-ms
        #endif

        //
        // HOMEY_REPEAT_DECAY defines how much time you have left (milliseconds)
        // after tapping a key to hold it again in order to make it auto-repeat.
        //
        #ifndef HOMEY_REPEAT_DECAY
        #define HOMEY_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
        #endif

        //
        // SHIFT_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
        // for index fingers (which Miryoku assigns to Shift) on home row keys.
        //
        // NOTE: The "tap-preferred" flavor of ZMK hold-tap for index finger keys
        // allows faster activation of the Shift modifier (without having to wait
        // for the modified key to be released as the "balanced" flavor requires).
        // Typing streaks and the `hold-trigger-on-release` setting are disabled
        // for the index fingers so as not to hinder their speed and dexterity.
        //
        #ifndef SHIFT_HOLDING_TYPE
        #define SHIFT_HOLDING_TYPE "tap-preferred"
        #endif

        //
        // SHIFT_HOLDING_TIME defines how long you need to hold (milliseconds)
        // index finger keys in order to send their modifiers to the computer
        // (i.e. "register" them) for mod-click mouse usage (e.g. Shift-Click).
        //
        // CAUTION: You'll need to perform inward rolls from pinky->ring->middle
        // fingers toward the index fingers when activating multiple modifiers
        // because `hold-trigger-on-release` is disabled for the index fingers.
        // Otherwise, you may be surprised that the index fingers' modifier is
        // sent immediately without the rest of your multi-mod chord when you
        // perform outward rolls from your index fingers toward your pinkies.
        //
        #ifndef SHIFT_HOLDING_TIME
        #define SHIFT_HOLDING_TIME 170
        #endif

        //
        // SHIFT_STREAK_DECAY defines how long you need to wait (milliseconds)
        // after typing before you can use home row mods again.  It prevents
        // unintended activation of home row mods when you're actively typing.
        //
        #ifndef SHIFT_STREAK_DECAY
        #define SHIFT_STREAK_DECAY 70 // global-quick-tap-ms
        #endif

        //
        // SHIFT_REPEAT_DECAY defines how much time you have left (milliseconds)
        // after tapping a key to hold it again in order to make it auto-repeat.
        //
        #ifndef SHIFT_REPEAT_DECAY
        #define SHIFT_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
        #endif

        //
        // THUMB_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
        // for the thumbs (which are assigned to 6 layers in the Miryoku system).
        //
        // NOTE: The "balanced" flavor of ZMK hold-tap provides instant modifier
        // activation for the symbol layer (if the tapped symbol key is released
        // while the thumb layer key is still held down) for quicker programming.
        //
        #ifndef THUMB_HOLDING_TYPE
        #define THUMB_HOLDING_TYPE "balanced"
        #endif

        //
        // THUMB_HOLDING_TIME defines how long you need to hold (milliseconds)
        // a thumb key to activate a layer.  Shorter holds are treated as taps.
        //
        #ifndef THUMB_HOLDING_TIME
        #define THUMB_HOLDING_TIME 200
        #endif

        //
        // THUMB_REPEAT_DECAY defines how much time you have left (milliseconds)
        // after tapping a key to hold it again in order to make it auto-repeat.
        //
        #ifndef THUMB_REPEAT_DECAY
        #define THUMB_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
        #endif

        //
        // SPACE_HOLDING_TIME defines how long you need to hold (milliseconds)
        // the space thumb key to activate.  Shorter holds are treated as taps.
        //
        #ifndef SPACE_HOLDING_TIME
        #define SPACE_HOLDING_TIME 170
        #endif

        //
        // SPACE_REPEAT_DECAY defines how much time you have left (milliseconds)
        // after tapping a key to hold it again in order to make it auto-repeat.
        //
        #ifndef SPACE_REPEAT_DECAY
        #define SPACE_REPEAT_DECAY 200 // "tap then hold" for key auto-repeat
        #endif

        //
        // Glove80 key positions index for positional hold-tap
        // - https://discord.com/channels/877392805654306816/937645688244826154/1066713913351221248
        // - https://media.discordapp.net/attachments/937645688244826154/1066713913133121556/image.png
        //
        // |------------------------|------------------------|
        // | LEFT_HAND_KEYS         |        RIGHT_HAND_KEYS |
        // |                        |                        |
        // |  0  1  2  3  4         |          5  6  7  8  9 |
        // | 10 11 12 13 14 15      |      16 17 18 19 20 21 |
        // | 22 23 24 25 26 27      |      28 29 30 31 32 33 |
        // | 34 35 36 37 38 39      |      40 41 42 43 44 45 |
        // | 46 47 48 49 50 51      |      58 59 60 61 62 63 |
        // | 64 65 66 67 68         |         75 76 77 78 79 |
        // |                69 52   |   57 74                |
        // |                 70 53  |  56 73                 |
        // |                  71 54 | 55 72                  |
        // |------------------------|------------------------|
        //
        #define LEFT_HAND_KEYS      \
              0  1  2  3  4         \
             10 11 12 13 14 15      \
             22 23 24 25 26 27      \
             34 35 36 37 38 39      \
             46 47 48 49 50 51      \
             64 65 66 67 68
        #define RIGHT_HAND_KEYS     \
                                               5  6  7  8  9 \
                                           16 17 18 19 20 21 \
                                           28 29 30 31 32 33 \
                                           40 41 42 43 44 45 \
                                           58 59 60 61 62 63 \
                                              75 76 77 78 79
        #define THUMB_KEYS          \
                            69 52       57 74                \
                             70 53     56 73                 \
                              71 54   55 72

        //
        // Home row mod-tap keys for all except index fingers
        //
        homey_left: miryoku_home_row_mods_left_hand {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_LEFT_HAND";
            flavor = HOMEY_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <HOMEY_HOLDING_TIME>;
            quick-tap-ms = <HOMEY_REPEAT_DECAY>;
            require-prior-idle-ms = <HOMEY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        homey_right: miryoku_home_row_mods_right_hand {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_RIGHT_HAND";
            flavor = HOMEY_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <HOMEY_HOLDING_TIME>;
            quick-tap-ms = <HOMEY_REPEAT_DECAY>;
            require-prior-idle-ms = <HOMEY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        //
        // Special home row mod-tap keys for the index fingers
        //
        shift_left: miryoku_home_row_mods_left_shift_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_LEFT_SHIFT_SHIFT";
            flavor = SHIFT_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            //hold-trigger-on-release; // don't wait for other mods
            tapping-term-ms = <SHIFT_HOLDING_TIME>;
            quick-tap-ms = <SHIFT_REPEAT_DECAY>;
            require-prior-idle-ms = <SHIFT_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        shift_right: miryoku_home_row_mods_right_shift_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_RIGHT_SHIFT_SHIFT";
            flavor = SHIFT_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            //hold-trigger-on-release; // don't wait for other mods
            tapping-term-ms = <SHIFT_HOLDING_TIME>;
            quick-tap-ms = <SHIFT_REPEAT_DECAY>;
            require-prior-idle-ms = <SHIFT_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        //
        // Thumb cluster hold-tap keys for Miryoku layers
        //
        thumb: miryoku_thumb_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "MIRYOKU_THUMB_LAYER";
            flavor = THUMB_HOLDING_TYPE;
            tapping-term-ms = <THUMB_HOLDING_TIME>;
            quick-tap-ms = <THUMB_REPEAT_DECAY>; // enable repeat
            //global-quick-tap; // no typing streak
            //retro-tap; // don't allow slow (hold-like) taps
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
        };
        space: miryoku_thumb_layer_spacebar {
            compatible = "zmk,behavior-hold-tap";
            label = "MIRYOKU_THUMB_LAYER_SPACEBAR";
            flavor = THUMB_HOLDING_TYPE;
            tapping-term-ms = <SPACE_HOLDING_TIME>;
            quick-tap-ms = <SPACE_REPEAT_DECAY>; // enable repeat
            //global-quick-tap; // no typing streak
            retro-tap; // allow slow (hold-like) taps
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
        };

        //////////////////////////////////////////////////////////////////////////
        //
        // Custom shifted pairs
        //
        //////////////////////////////////////////////////////////////////////////

        //
        // Shift + CapsWord = CapsLock
        //
        cappy: capsword_and_capslock {
            compatible = "zmk,behavior-mod-morph";
            label = "CAPSWORD_AND_CAPSLOCK";
            #binding-cells = <0>;
            bindings = <&caps_word>, <&kp CAPSLOCK>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        //////////////////////////////////////////////////////////////////////////
        //
        // ZMK global overrides
        //
        //////////////////////////////////////////////////////////////////////////

        //
        // CapsWord - ported from Pascal Getreuer's extension for QMK
        // - https://zmk.dev/docs/behaviors/caps-word
        // - https://getreuer.info/posts/keyboards/caps-word/index.html
        //
        behavior_caps_word {
            continue-list = <
                UNDERSCORE MINUS
                BACKSPACE DELETE
                N1 N2 N3 N4 N5 N6 N7 N8 N9 N0
            >;
        };
    };

    /* Automatically generated keymap */

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&kp F1              &kp F2              &kp F3              &kp F4               &kp F5                                                                                                    &kp F6                &kp F7                &kp F8               &kp F9         &kp F10
&kp EQUAL           &kp N1              &kp N2              &kp N3               &kp N4           &kp N5                                                                  &kp N6           &kp N7                &kp N8                &kp N9               &kp N0         &kp MINUS
&kp TAB             &kp Q               &kp W               &kp E                &kp R            &kp T                                                                   &kp Y            &kp U                 &kp I                 &kp O                &kp P          &kp BSLH
&kp ESC     &homey_left LGUI A  &homey_left LALT S  &homey_left LCTRL D  &shift_left LSHFT F      &kp G                                                                   &kp H   &shift_right LSHFT J  &homey_right LCTRL K  &homey_right LALT L  &homey_right LGUI SEMI  &kp SQT
&kp GRAVE           &kp Z               &kp X               &kp C                &kp V            &kp B   &kp LSHFT  &kp LCTRL  &lower    &kp LGUI  &kp RCTRL  &kp RSHFT  &kp N            &kp M                 &kp COMMA             &kp DOT              &kp FSLH       &kp PG_UP
&magic 2 0          &kp HOME            &kp END             &kp LEFT             &kp RIGHT                &kp BSPC   &kp DEL    &kp LALT  &kp RALT  &kp RET    &kp SPACE                   &kp UP                &kp DOWN              &kp LBKT             &kp RBKT       &kp PG_DN
            >;
        };

        layer_Lower {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV      &kp C_NEXT      &kp C_PP                                                                                           &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &none            &kp PAUSE_BREAK
&trans        &none         &none           &none           &none            &kp HOME                                                   &kp LEFT_PARENTHESIS   &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY  &kp PRINTSCREEN
&trans        &none         &none           &kp UP_ARROW    &none            &kp END                                                    &kp RIGHT_PARENTHESIS  &kp KP_N7   &kp KP_N8     &kp KP_N9     &kp KP_MINUS     &kp SCROLLLOCK
&trans        &none         &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PG_UP                                                  &kp PERCENT            &kp KP_N4   &kp KP_N5     &kp KP_N6     &kp KP_PLUS      &none
&trans        &kp K_APP     &none           &kp F11         &kp F12          &kp PG_DN  &trans  &trans  &to 0   &trans  &trans  &trans  &kp COMMA              &kp KP_N1   &kp KP_N2     &kp KP_N3     &kp KP_ENTER     &trans
&magic 2 0    &kp CAPS      &kp INS         &kp F11         &kp F12                     &trans  &trans  &trans  &trans  &trans  &trans                         &kp KP_N0   &kp KP_N0     &kp KP_DOT    &kp KP_ENTER     &trans
            >;
        };

        layer_Magic {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&trans       &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&reset       &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };
    };
};
